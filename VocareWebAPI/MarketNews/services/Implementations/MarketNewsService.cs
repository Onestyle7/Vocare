using System.Text.Json;
using AutoMapper;
using Microsoft.Extensions.Options;
using VocareWebAPI.CareerAdvisor.Models.Config;
using VocareWebAPI.MarketNews.Models.Dtos;
using VocareWebAPI.MarketNews.Models.Entities;
using VocareWebAPI.MarketNews.Repositories.Interfaces;
using VocareWebAPI.MarketNews.Services.Interfaces;

namespace VocareWebAPI.MarketNews.Services.Implementations
{
    public class MarketNewsService : IMarketNewsService
    {
        private readonly IMarketNewsRepository _marketNewsRepository;
        private readonly ILogger<MarketNewsService> _logger;
        private readonly HttpClient _httpClient;
        private readonly IMapper _mapper;
        private readonly PerplexityAIConfig _config;

        public MarketNewsService(
            IMarketNewsRepository marketNewsRepository,
            ILogger<MarketNewsService> logger,
            HttpClient httpClient,
            IMapper mapper,
            IOptions<PerplexityAIConfig> config
        )
        {
            _marketNewsRepository = marketNewsRepository;
            _logger = logger;
            _httpClient = httpClient;
            _mapper = mapper;
            _config = config.Value;

            _httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {_config.ApiKey}");
            _httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
        }

        private async Task<bool> GenerateNewsAsync()
        {
            var actualNewsExists = await _marketNewsRepository.ExistsForDateAsync(DateTime.UtcNow);
            if (actualNewsExists)
            {
                _logger.LogInformation("News for today already exists, skipping generation.");
                return false;
            }
            var previousWeekStart = DateTime.UtcNow.AddDays(
                -7 - (int)DateTime.UtcNow.DayOfWeek + 1
            );
            var previousWeekEnd = previousWeekStart.AddDays(6);
            var previousWeekStartStr = previousWeekStart.ToString("yyyy-MM-dd");
            var previousWeekEndStr = previousWeekEnd.ToString("yyyy-MM-dd");
            var prompt = $$"""
                Jeste≈õ ekspertem analitykiem rynku specjalizujƒÖcym siƒô w rynku pracy i trendach zatrudnienia. Twoim zadaniem jest stworzenie cotygodniowego podsumowania newslettera w stylu blogowym na stronƒô g≈Ç√≥wnƒÖ aplikacji mobilnej i webowej. Skup siƒô na szerokich nowinkach rynkowych, z silnym naciskiem na rynek pracy: kluczowe wydarzenia, trendy, statystyki, og≈Çoszenia firm, zmiany polityczne, wska≈∫niki ekonomiczne oraz ciekawe szczeg√≥≈Çy lub anegdoty z minionego tygodnia.

                Wyszukaj i podsumuj wydarzenia wy≈ÇƒÖcznie z poprzedniego tygodnia: od {{previousWeekStartStr}} do {{previousWeekEndStr}} (format: YYYY-MM-DD). U≈ºywaj wiarygodnych ≈∫r√≥de≈Ç, takich jak portale informacyjne, oficjalne raporty i analizy bran≈ºowe. Pobieraj dane poprzez wyszukiwanie w sieci, aby zapewniƒá aktualno≈õƒá i dok≈Çadno≈õƒá.

                Kluczowe wymagania:
                - **Szeroki zakres, ale skoncentrowany na rynku pracy**: Om√≥w globalne i regionalne (np. USA, UE, Polska je≈õli istotne) nowinki z rynku pracy, w tym trendy zatrudnienia, zwolnienia, zmiany w pracy zdalnej, braki umiejƒôtno≈õci, zmiany p≈Çac, stopy bezrobocia, wp≈Çyw technologii/AI na pracƒô, finansowanie startup√≥w wp≈ÇywajƒÖce na zatrudnienie oraz aktualizacje regulacyjne. Dodaj "fajne fakty" lub zaskakujƒÖce szczeg√≥≈Çy, aby by≈Ço anga≈ºujƒÖco (np. "Czy wiesz, ≈ºe firma X zatrudni≈Ça 500 os√≥b w jeden dzie≈Ñ dziƒôki viralowemu trendowi?").
                - **Struktura jak wpis blogowy**: 
                  - Tytu≈Ç: Atrakcyjny i relewantny, np. "Cotygodniowy Buzz na Rynku Pracy: Najwa≈ºniejsze Wydarzenia od {{previousWeekStartStr}} do {{previousWeekEndStr}}".
                  - Wstƒôp: Kr√≥tki haczyk (1-2 zdania) podsumowujƒÖcy klimat tygodnia.
                  - G≈Ç√≥wne sekcje: 4-6 punkt√≥w lub kr√≥tkich akapit√≥w, ka≈ºdy skupiony na g≈Ç√≥wnym wydarzeniu lub trendzie. W≈ÇƒÖcz:
                    - Co siƒô wydarzy≈Ço (fakty).
                    - Dlaczego to wa≈ºne (wp≈Çyw na szukajƒÖcych pracy/pracodawc√≥w).
                    - Ciekawy szczeg√≥≈Ç (anegdota lub statystyka).
                  - Zako≈Ñczenie: 1-2 zdania z prognozami lub poradami.
                - **D≈Çugo≈õƒá**: Zwiƒôz≈Ça dla czytania na mobile ‚Äì 400-600 s≈Ç√≥w ≈ÇƒÖcznie.
                - **Ton**: Profesjonalny, ale przystƒôpny, optymistyczny i informacyjny. Unikaj ≈ºargonu; wyja≈õniaj terminy je≈õli potrzeba.
                - **Optymalizacja SEO**: Upewnij siƒô, ≈ºe tre≈õƒá jest zgodna z najlepszymi praktykami SEO na 2025 rok. W≈ÇƒÖcz naturalnie s≈Çowa kluczowe zwiƒÖzane z rynkiem pracy (np. "trendy zatrudnienia 2025", "nowinki na rynku pracy"). U≈ºywaj nag≈Ç√≥wk√≥w H2/H3 dla sekcji (np. ## Sekcja 1), list wypunktowanych dla czytelno≈õci, kr√≥tkich akapit√≥w. Dodaj sekcjƒô FAQ na ko≈Ñcu, je≈õli pasuje, i cytuj ≈∫r√≥d≈Ça z linkami. Pisz dla u≈ºytkownik√≥w, nie dla wyszukiwarek, ale buduj topical authority wok√≥≈Ç tematu rynku pracy. Zoptymalizuj tytu≈Ç i wstƒôp pod kƒÖtem klikalno≈õci.
                - **≈πr√≥d≈Ça**: Podaj 3-5 kluczowych ≈∫r√≥de≈Ç na ko≈Ñcu (np. URL-e z Bloomberg, LinkedIn News lub stron statystycznych), z anchor textami dla link√≥w.
                - **Format wyj≈õcia**: Zwyk≈Çy tekst z markdown dla czytelno≈õci (pogrubienie nag≈Ç√≥wk√≥w, punkty dla list, ## dla H2).

                Upewnij siƒô, ≈ºe tre≈õƒá jest oryginalna, nie skopiowana, i dostosowana do u≈ºytkownik√≥w aplikacji zainteresowanych rozwojem kariery.
                """;
            var requestBody = new
            {
                model = _config.Model,
                messages = new[] { new { role = "user", content = prompt } },
                response_format = new
                {
                    type = "json_schema",
                    json_schema = new
                    {
                        title = "MarketNews",
                        type = "object",
                        properties = new
                        {
                            title = new
                            {
                                type = "string",
                                description = "Tytu≈Ç newsa w formacie markdown",
                            },
                            content = new
                            {
                                type = "string",
                                description = "Tre≈õƒá newsa w formacie markdown",
                            },
                            summary = new
                            {
                                type = "string",
                                description = "Tre≈õƒá newsa w formacie markdown",
                            },
                        },
                        required = new[] { "title", "content", "summary" },
                    },
                },
            };

            var response = await _httpClient.PostAsJsonAsync(
                new Uri(_config.BaseUrl + "/chat/completions"),
                requestBody
            );

            var responseContent = await response.Content.ReadAsStringAsync();

            if (!response.IsSuccessStatusCode)
            {
                _logger.LogError(
                    "Error generating market news: {StatusCode} - {ResponseContent}",
                    response.StatusCode,
                    responseContent
                );
                throw new Exception(
                    $"Error generating market news: {response.StatusCode} - {responseContent}"
                );
            }
            try
            {
                // üîç KROK 1: Parsowanie structured JSON response
                using var json = JsonDocument.Parse(responseContent);
                var aiContent = json
                    .RootElement.GetProperty("choices")[0]
                    .GetProperty("message")
                    .GetProperty("content")
                    .GetString();

                // üéØ KROK 2: Parsowanie structured response (JSON w JSON)
                using var contentJson = JsonDocument.Parse(aiContent);
                var title =
                    contentJson.RootElement.GetProperty("title").GetString()
                    ?? "Cotygodniowe podsumowanie";
                var summary = contentJson.RootElement.GetProperty("summary").GetString() ?? "";
                var content = contentJson.RootElement.GetProperty("content").GetString() ?? "";

                // üõ°Ô∏è KROK 3: Validation (database constraints)
                title = title.Length > 100 ? title.Substring(0, 97) + "..." : title;
                summary = summary.Length > 150 ? summary.Substring(0, 147) + "..." : summary;
                content = content.Length > 3000 ? content.Substring(0, 2997) + "..." : content;

                // üèóÔ∏è KROK 4: Tworzenie obiektu MarketNews
                var marketNews = new MarketNewsEntity
                {
                    Id = Guid.NewGuid(),
                    Title = title,
                    Summary = summary,
                    Content = content,
                    CreatedAt = DateTime.UtcNow,
                };

                // üíæ KROK 5: Zapis do bazy
                await _marketNewsRepository.AddAsync(marketNews);

                _logger.LogInformation(
                    "Successfully generated and saved market news with ID: {NewsId}",
                    marketNews.Id
                );

                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to parse AI response or save to database");
                throw;
            }
        }

        public async Task<bool> GenerateNewsManuallyAsync()
        {
            return await GenerateNewsAsync();
        }

        public async Task<bool> GenerateWeeklyNewsAsync()
        {
            return await GenerateNewsAsync();
        }

        public async Task<MarketNewsPagedDto> GetAllForBlogAsync(int page, int pageSize)
        {
            var (news, totalCount) = await _marketNewsRepository.GetAllPagedAsync(page, pageSize);
            var newsDto = _mapper.Map<List<MarketNewsListDto>>(news);

            return new MarketNewsPagedDto
            {
                News = newsDto,
                TotalCount = totalCount,
                Page = page,
                PageSize = pageSize,
            };
        }

        public async Task<MarketNewsDetailDto?> GetDetailAsync(Guid id)
        {
            var entity = await _marketNewsRepository.GetByIdAsync(id);
            if (entity == null)
                return null;

            return _mapper.Map<MarketNewsDetailDto?>(entity);
        }

        public async Task<List<MarketNewsListDto>> GetLatest3ForHomepageAsync()
        {
            var latest3news = await _marketNewsRepository.GetLatest3Async();
            return _mapper.Map<List<MarketNewsListDto>>(latest3news);
        }

        public async Task<MarketNewsListDto?> GetLatestForPopupAsync()
        {
            var entity = await _marketNewsRepository.GetLatestAsync();
            if (entity == null)
                return null;

            return _mapper.Map<MarketNewsListDto>(entity);
        }
    }
}
