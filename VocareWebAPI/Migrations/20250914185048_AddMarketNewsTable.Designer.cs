// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VocareWebAPI.Data;

#nullable disable

namespace VocareWebAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250914185048_AddMarketNewsTable")]
    partial class AddMarketNewsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "public");
                });

            modelBuilder.Entity("VocareWebAPI.Billing.Models.Entities.ServiceCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TokenCost")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ServiceCosts", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ServiceName = "AnalyzeProfile",
                            TokenCost = 5
                        },
                        new
                        {
                            Id = 2,
                            ServiceName = "GenerateCV",
                            TokenCost = 5
                        },
                        new
                        {
                            Id = 3,
                            ServiceName = "MarketAnalysis",
                            TokenCost = 5
                        },
                        new
                        {
                            Id = 4,
                            ServiceName = "GenerateCv",
                            TokenCost = 1
                        });
                });

            modelBuilder.Entity("VocareWebAPI.Billing.Models.Entities.TokenTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TokenTransactions", "public");
                });

            modelBuilder.Entity("VocareWebAPI.Billing.Models.Entities.UserBilling", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastTokenPurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StripeCustomerId")
                        .HasColumnType("text");

                    b.Property<string>("StripeSubscriptionId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SubscriptionEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SubscriptionLevel")
                        .HasColumnType("integer");

                    b.Property<int>("SubscriptionStatus")
                        .HasColumnType("integer");

                    b.Property<int>("TokenBalance")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("UserBillings", "public");
                });

            modelBuilder.Entity("VocareWebAPI.CvGenerator.Models.GeneratedCv", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CvJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("TargetPosition")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("UserId", "IsActive");

                    b.ToTable("GeneratedCvs", "public");
                });

            modelBuilder.Entity("VocareWebAPI.MarketNews.Models.Entities.MarketNewsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.ToTable("MarketNews", "public");
                });

            modelBuilder.Entity("VocareWebAPI.Models.AiRecommendation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AiRecommendationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Justification")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LongTermGoal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimaryPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RecommendationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AiRecommendationId");

                    b.HasIndex("UserId");

                    b.ToTable("AiRecommendations", "public");
                });

            modelBuilder.Entity("VocareWebAPI.Models.Entities.CareerPath", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AiRecommendationId")
                        .HasColumnType("uuid");

                    b.Property<string>("CareerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CareerStatisticsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("MarketAnalysis")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Probability")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("RecommendedCourses")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<string>>("RequiredSkills")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<Guid>("SwotAnalysisId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AiRecommendationId");

                    b.HasIndex("CareerStatisticsId");

                    b.HasIndex("SwotAnalysisId");

                    b.ToTable("CareerPath", "public");
                });

            modelBuilder.Entity("VocareWebAPI.Models.Entities.MarketAnalysis.CareerStatistics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AiRecommendationId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("AverageSalaryMax")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AverageSalaryMin")
                        .HasColumnType("numeric");

                    b.Property<string>("CareerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EmploymentRate")
                        .HasColumnType("integer");

                    b.Property<string>("GrowthForecast")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AiRecommendationId");

                    b.ToTable("CareerStatistics", "public");
                });

            modelBuilder.Entity("VocareWebAPI.Models.Entities.MarketAnalysis.MarketTrends", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AiRecommendationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Impact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TrendName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AiRecommendationId");

                    b.ToTable("MarketTrends", "public");
                });

            modelBuilder.Entity("VocareWebAPI.Models.Entities.MarketAnalysis.SkillDemand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AiRecommendationId")
                        .HasColumnType("uuid");

                    b.Property<string>("DemandLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AiRecommendationId");

                    b.ToTable("SkillDemand", "public");
                });

            modelBuilder.Entity("VocareWebAPI.Models.Entities.NextStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AiRecommendationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Step")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AiRecommendationId");

                    b.ToTable("NextStep", "public");
                });

            modelBuilder.Entity("VocareWebAPI.Models.Entities.SwotAnalysis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<string>>("Opportunities")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<string>>("Strengths")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<string>>("Threats")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<string>>("Weaknesses")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("SwotAnalysis", "public");
                });

            modelBuilder.Entity("VocareWebAPI.Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "public");
                });

            modelBuilder.Entity("VocareWebAPI.Models.Entities.UserProfile", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("AboutMe")
                        .HasColumnType("text");

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonalityType")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("Skills")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<string>>("SoftSkills")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("WillingToRebrand")
                        .HasColumnType("boolean");

                    b.HasKey("UserId");

                    b.ToTable("UserProfiles", "public");
                });

            modelBuilder.Entity("VocareWebAPI.UserManagement.Models.Entities.CertificateEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Issuer")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserProfileUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileUserId");

                    b.ToTable("CertificateEntry", "public");
                });

            modelBuilder.Entity("VocareWebAPI.UserManagement.Models.Entities.EducationEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserProfileUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileUserId");

                    b.ToTable("EducationEntry", "public");
                });

            modelBuilder.Entity("VocareWebAPI.UserManagement.Models.Entities.FinancialSurvey", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<decimal?>("CurrentSalary")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("DesiredSalary")
                        .HasColumnType("numeric");

                    b.Property<bool>("HasLoans")
                        .HasColumnType("boolean");

                    b.Property<string>("LoanDetails")
                        .HasColumnType("text");

                    b.Property<int>("RiskAppetite")
                        .HasColumnType("integer");

                    b.Property<bool>("WillingToRelocate")
                        .HasColumnType("boolean");

                    b.HasKey("UserId");

                    b.ToTable("FinancialSurveys", "public");
                });

            modelBuilder.Entity("VocareWebAPI.UserManagement.Models.Entities.LanguageEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserProfileUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileUserId");

                    b.ToTable("LanguageEntry", "public");
                });

            modelBuilder.Entity("VocareWebAPI.UserManagement.Models.Entities.WorkExperienceEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("Responsibilities")
                        .HasColumnType("text[]");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserProfileUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileUserId");

                    b.ToTable("WorkExperienceEntry", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VocareWebAPI.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VocareWebAPI.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VocareWebAPI.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VocareWebAPI.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VocareWebAPI.Billing.Models.Entities.UserBilling", b =>
                {
                    b.HasOne("VocareWebAPI.Models.Entities.User", null)
                        .WithOne("Billing")
                        .HasForeignKey("VocareWebAPI.Billing.Models.Entities.UserBilling", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VocareWebAPI.CvGenerator.Models.GeneratedCv", b =>
                {
                    b.HasOne("VocareWebAPI.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VocareWebAPI.Models.AiRecommendation", b =>
                {
                    b.HasOne("VocareWebAPI.Models.AiRecommendation", null)
                        .WithMany("Recommendations")
                        .HasForeignKey("AiRecommendationId");

                    b.HasOne("VocareWebAPI.Models.Entities.UserProfile", "UserProfile")
                        .WithMany("Recommendations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("VocareWebAPI.Models.Entities.CareerPath", b =>
                {
                    b.HasOne("VocareWebAPI.Models.AiRecommendation", null)
                        .WithMany("CareerPaths")
                        .HasForeignKey("AiRecommendationId");

                    b.HasOne("VocareWebAPI.Models.Entities.MarketAnalysis.CareerStatistics", "CareerStatistics")
                        .WithMany()
                        .HasForeignKey("CareerStatisticsId");

                    b.HasOne("VocareWebAPI.Models.Entities.SwotAnalysis", "SwotAnalysis")
                        .WithMany()
                        .HasForeignKey("SwotAnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CareerStatistics");

                    b.Navigation("SwotAnalysis");
                });

            modelBuilder.Entity("VocareWebAPI.Models.Entities.MarketAnalysis.CareerStatistics", b =>
                {
                    b.HasOne("VocareWebAPI.Models.AiRecommendation", null)
                        .WithMany("CareerStatistics")
                        .HasForeignKey("AiRecommendationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VocareWebAPI.Models.Entities.MarketAnalysis.MarketTrends", b =>
                {
                    b.HasOne("VocareWebAPI.Models.AiRecommendation", "AiRecommendation")
                        .WithMany("MarketTrends")
                        .HasForeignKey("AiRecommendationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AiRecommendation");
                });

            modelBuilder.Entity("VocareWebAPI.Models.Entities.MarketAnalysis.SkillDemand", b =>
                {
                    b.HasOne("VocareWebAPI.Models.AiRecommendation", null)
                        .WithMany("SkillDemands")
                        .HasForeignKey("AiRecommendationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VocareWebAPI.Models.Entities.NextStep", b =>
                {
                    b.HasOne("VocareWebAPI.Models.AiRecommendation", null)
                        .WithMany("NextSteps")
                        .HasForeignKey("AiRecommendationId");
                });

            modelBuilder.Entity("VocareWebAPI.Models.Entities.UserProfile", b =>
                {
                    b.HasOne("VocareWebAPI.Models.Entities.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("VocareWebAPI.Models.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VocareWebAPI.UserManagement.Models.Entities.CertificateEntry", b =>
                {
                    b.HasOne("VocareWebAPI.Models.Entities.UserProfile", null)
                        .WithMany("Certificates")
                        .HasForeignKey("UserProfileUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VocareWebAPI.UserManagement.Models.Entities.EducationEntry", b =>
                {
                    b.HasOne("VocareWebAPI.Models.Entities.UserProfile", null)
                        .WithMany("Education")
                        .HasForeignKey("UserProfileUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VocareWebAPI.UserManagement.Models.Entities.FinancialSurvey", b =>
                {
                    b.HasOne("VocareWebAPI.Models.Entities.UserProfile", "UserProfile")
                        .WithOne("FinancialSurvey")
                        .HasForeignKey("VocareWebAPI.UserManagement.Models.Entities.FinancialSurvey", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("VocareWebAPI.UserManagement.Models.Entities.LanguageEntry", b =>
                {
                    b.HasOne("VocareWebAPI.Models.Entities.UserProfile", null)
                        .WithMany("Languages")
                        .HasForeignKey("UserProfileUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VocareWebAPI.UserManagement.Models.Entities.WorkExperienceEntry", b =>
                {
                    b.HasOne("VocareWebAPI.Models.Entities.UserProfile", null)
                        .WithMany("WorkExperience")
                        .HasForeignKey("UserProfileUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VocareWebAPI.Models.AiRecommendation", b =>
                {
                    b.Navigation("CareerPaths");

                    b.Navigation("CareerStatistics");

                    b.Navigation("MarketTrends");

                    b.Navigation("NextSteps");

                    b.Navigation("Recommendations");

                    b.Navigation("SkillDemands");
                });

            modelBuilder.Entity("VocareWebAPI.Models.Entities.User", b =>
                {
                    b.Navigation("Billing")
                        .IsRequired();

                    b.Navigation("UserProfile")
                        .IsRequired();
                });

            modelBuilder.Entity("VocareWebAPI.Models.Entities.UserProfile", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Education");

                    b.Navigation("FinancialSurvey");

                    b.Navigation("Languages");

                    b.Navigation("Recommendations");

                    b.Navigation("WorkExperience");
                });
#pragma warning restore 612, 618
        }
    }
}
